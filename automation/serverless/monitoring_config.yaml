# Comprehensive Monitoring and Alerting Configuration
# Configures monitoring intervals, alert thresholds, and notification channels

# Monitoring Configuration
monitoring:
  enabled: true
  interval_seconds: 300  # 5 minutes
  metrics_retention_days: 30
  alert_retention_days: 90
  health_check_interval_seconds: 60  # 1 minute
  dashboard_refresh_seconds: 30

# Alert Configuration
alerts:
  # Quota usage alerts
  quota_usage:
    enabled: true
    warning_threshold: 80  # 80% of monthly quota
    critical_threshold: 95  # 95% of monthly quota
    check_interval_seconds: 300  # 5 minutes
    
  # Cost threshold alerts
  cost_threshold:
    enabled: true
    warning_threshold: 0.01  # $0.01
    critical_threshold: 0.05  # $0.05
    daily_budget_limit: 0.10  # $0.10
    monthly_budget_limit: 1.00  # $1.00
    check_interval_seconds: 3600  # 1 hour
    
  # Performance degradation alerts
  performance:
    enabled: true
    slow_response_threshold_ms: 10000  # 10 seconds
    very_slow_response_threshold_ms: 30000  # 30 seconds
    high_error_rate_threshold: 0.1  # 10%
    critical_error_rate_threshold: 0.2  # 20%
    low_success_rate_threshold: 0.9  # 90%
    check_interval_seconds: 300  # 5 minutes
    
  # Provider health alerts
  provider_health:
    enabled: true
    unhealthy_threshold_minutes: 5  # Mark unhealthy after 5 minutes of failures
    circuit_breaker_threshold: 5  # Consecutive failures before circuit breaker
    health_check_timeout_seconds: 30
    check_interval_seconds: 60  # 1 minute
    
  # Projection accuracy alerts
  projection_accuracy:
    enabled: true
    low_confidence_threshold: 0.5  # 50% confidence
    very_low_confidence_threshold: 0.3  # 30% confidence
    high_volatility_threshold: 0.4  # 40% volatility
    check_interval_seconds: 3600  # 1 hour
    
  # System error alerts
  system_error:
    enabled: true
    error_rate_threshold: 0.05  # 5% error rate
    consecutive_errors_threshold: 3
    check_interval_seconds: 300  # 5 minutes

# Notification Configuration
notifications:
  # Telegram notifications
  telegram:
    enabled: true
    bot_token_env: "TELEGRAM_BOT_TOKEN"
    chat_id_env: "TELEGRAM_CHAT_ID"
    send_resolution_notifications: true
    rate_limit_per_minute: 10
    message_format: "markdown"
    
  # Email notifications
  email:
    enabled: false
    smtp_server: "smtp.gmail.com"
    smtp_port: 587
    use_tls: true
    username_env: "EMAIL_USERNAME"
    password_env: "EMAIL_PASSWORD"
    from_address_env: "EMAIL_FROM_ADDRESS"
    to_addresses: ["admin@example.com"]
    send_resolution_notifications: true
    rate_limit_per_hour: 20
    
  # SMS notifications (via Twilio)
  sms:
    enabled: false
    provider: "twilio"  # twilio, aws_sns
    api_key_env: "SMS_API_KEY"
    api_secret_env: "SMS_API_SECRET"
    phone_number_env: "SMS_PHONE_NUMBER"
    send_resolution_notifications: false
    rate_limit_per_hour: 5
    
  # Webhook notifications
  webhook:
    enabled: false
    url_env: "WEBHOOK_URL"
    secret_env: "WEBHOOK_SECRET"
    timeout_seconds: 10
    retry_attempts: 3
    send_resolution_notifications: true

# Alert Routing Rules
alert_routing:
  # Route alerts based on level and type
  rules:
    - level: "emergency"
      channels: ["telegram", "email", "sms"]
      immediate: true
      
    - level: "critical"
      channels: ["telegram", "email"]
      immediate: true
      
    - level: "warning"
      channels: ["telegram"]
      immediate: false
      batch_interval_minutes: 15
      
    - level: "info"
      channels: ["log"]
      immediate: false
      batch_interval_minutes: 60
  
  # Provider-specific routing
  provider_routing:
    aws_lambda:
      critical_channels: ["telegram", "email"]
      warning_channels: ["telegram"]
      
    google_cloud_functions:
      critical_channels: ["telegram", "email"]
      warning_channels: ["telegram"]
      
    azure_functions:
      critical_channels: ["telegram", "email"]
      warning_channels: ["telegram"]

# Metrics Collection
metrics:
  # Quota metrics
  quota_metrics:
    - name: "quota_usage_percent"
      collection_interval_seconds: 300
      retention_days: 30
      
    - name: "monthly_cost"
      collection_interval_seconds: 3600
      retention_days: 90
      
    - name: "monthly_executions"
      collection_interval_seconds: 300
      retention_days: 30
  
  # Performance metrics
  performance_metrics:
    - name: "response_time"
      collection_interval_seconds: 60
      retention_days: 7
      
    - name: "success_rate"
      collection_interval_seconds: 60
      retention_days: 7
      
    - name: "error_rate"
      collection_interval_seconds: 60
      retention_days: 7
  
  # Projection metrics
  projection_metrics:
    - name: "projection_confidence"
      collection_interval_seconds: 3600
      retention_days: 30
      
    - name: "projected_executions"
      collection_interval_seconds: 3600
      retention_days: 30

# Health Status Configuration
health_status:
  # Health levels and their criteria
  health_levels:
    healthy:
      max_quota_usage_percent: 80
      max_error_rate: 0.05
      max_response_time_ms: 5000
      min_success_rate: 0.95
      
    degraded:
      max_quota_usage_percent: 95
      max_error_rate: 0.1
      max_response_time_ms: 10000
      min_success_rate: 0.9
      
    critical:
      max_quota_usage_percent: 100
      max_error_rate: 0.2
      max_response_time_ms: 30000
      min_success_rate: 0.8
  
  # Health check intervals
  check_intervals:
    overall_health: 60  # seconds
    provider_health: 30  # seconds
    quota_health: 300  # seconds
    performance_health: 60  # seconds

# Reporting Configuration
reporting:
  # Daily reports
  daily_reports:
    enabled: true
    generation_time: "06:00"  # 6 AM UTC
    retention_days: 30
    include_metrics: true
    include_alerts: true
    include_projections: true
    notification_channels: ["telegram"]
    
  # Weekly reports
  weekly_reports:
    enabled: true
    generation_day: "monday"
    generation_time: "08:00"  # 8 AM UTC
    retention_days: 90
    include_trends: true
    include_cost_analysis: true
    include_performance_analysis: true
    notification_channels: ["telegram", "email"]
    
  # Monthly reports
  monthly_reports:
    enabled: true
    generation_day: 1  # First day of month
    generation_time: "09:00"  # 9 AM UTC
    retention_days: 365
    include_comprehensive_analysis: true
    include_recommendations: true
    notification_channels: ["email"]

# Database Configuration
database:
  # SQLite database settings
  db_path: "./monitoring_data.db"
  backup_enabled: true
  backup_frequency: "daily"
  backup_retention_days: 30
  vacuum_frequency_days: 7
  
  # Performance settings
  connection_pool_size: 5
  query_timeout_seconds: 30
  max_connections: 10
  
  # Data retention
  data_retention:
    metrics: 30  # days
    alerts: 90  # days
    health_status: 30  # days
    reports: 365  # days

# Performance Optimization
performance:
  # Caching settings
  cache_enabled: true
  cache_ttl_seconds: 300  # 5 minutes
  cache_size_mb: 100
  
  # Parallel processing
  parallel_checks: true
  max_workers: 4
  
  # Memory management
  max_memory_usage_mb: 512
  garbage_collection_frequency: 100  # Every 100 operations
  
  # Batch processing
  batch_size: 100
  batch_timeout_seconds: 30

# Security Configuration
security:
  # Data encryption
  encryption:
    enabled: true
    algorithm: "AES-256-GCM"
    key_env: "MONITORING_ENCRYPTION_KEY"
    
  # Access control
  access_control:
    enabled: false
    api_key_required: false
    api_key_env: "MONITORING_API_KEY"
    allowed_ips: []
    
  # Audit logging
  audit_logging:
    enabled: true
    log_level: "INFO"
    log_file: "./logs/monitoring_audit.log"
    log_retention_days: 90

# Integration Settings
integration:
  # Quota manager integration
  quota_manager:
    enabled: true
    sync_frequency_seconds: 60
    auto_update_thresholds: true
    
  # Load balancer integration
  load_balancer:
    enabled: true
    health_check_frequency_seconds: 30
    performance_monitoring: true
    
  # Projection calculator integration
  projection_calculator:
    enabled: true
    sync_frequency_seconds: 3600
    accuracy_monitoring: true

# Logging Configuration
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # Log files
  log_files:
    main_log: "./logs/monitoring.log"
    error_log: "./logs/monitoring_errors.log"
    alert_log: "./logs/monitoring_alerts.log"
    performance_log: "./logs/monitoring_performance.log"
  
  # Log rotation
  log_rotation:
    enabled: true
    max_size_mb: 100
    backup_count: 5
    rotation_frequency: "daily"

# Development and Testing
development:
  # Mock mode for testing
  mock_mode: false
  
  # Test data generation
  generate_test_data: false
  test_data_points: 100
  
  # Debug settings
  debug_mode: false
  verbose_logging: false
  save_debug_data: false
  
  # Test alerts
  test_alerts:
    enabled: false
    test_alert_interval_seconds: 3600

# Environment Variables
environment_variables:
  # Notification credentials
  TELEGRAM_BOT_TOKEN: "your-telegram-bot-token"
  TELEGRAM_CHAT_ID: "your-telegram-chat-id"
  
  EMAIL_USERNAME: "your-email@example.com"
  EMAIL_PASSWORD: "your-email-password"
  EMAIL_FROM_ADDRESS: "monitor@example.com"
  
  SMS_API_KEY: "your-sms-api-key"
  SMS_API_SECRET: "your-sms-api-secret"
  SMS_PHONE_NUMBER: "+1234567890"
  
  WEBHOOK_URL: "https://your-webhook-url.com/alerts"
  WEBHOOK_SECRET: "your-webhook-secret"
  
  # Security
  MONITORING_ENCRYPTION_KEY: "your-32-character-encryption-key"
  MONITORING_API_KEY: "your-monitoring-api-key"

# Usage Examples
usage_examples:
  start_monitoring: |
    python3 comprehensive_monitor.py --start
    
  stop_monitoring: |
    python3 comprehensive_monitor.py --stop
    
  show_dashboard: |
    python3 comprehensive_monitor.py --dashboard
    
  show_alerts: |
    python3 comprehensive_monitor.py --alerts
    
  show_health: |
    python3 comprehensive_monitor.py --health

# API Examples
api_examples:
  python_integration: |
    from comprehensive_monitor import ComprehensiveMonitor
    
    monitor = ComprehensiveMonitor()
    
    # Start monitoring
    monitor.start_monitoring()
    
    # Get dashboard data
    dashboard = monitor.get_monitoring_dashboard()
    print(f"Overall health: {dashboard['overall_health']}")
    
    # Check active alerts
    if monitor.active_alerts:
        for alert in monitor.active_alerts.values():
            print(f"Alert: {alert.title}")
    
    # Stop monitoring
    monitor.stop_monitoring()
  
  scheduled_execution: |
    # Add to crontab for continuous monitoring
    # @reboot /usr/bin/python3 /path/to/comprehensive_monitor.py --start
    
    # Or use systemd service
    # [Unit]
    # Description=Comprehensive Monitor
    # After=network.target
    # 
    # [Service]
    # Type=simple
    # User=monitor
    # WorkingDirectory=/path/to/monitor
    # ExecStart=/usr/bin/python3 comprehensive_monitor.py --start
    # Restart=always
    # 
    # [Install]
    # WantedBy=multi-user.target
