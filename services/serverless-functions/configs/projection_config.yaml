# Daily Projection Calculator Configuration
# Configures projection calculation methods, data retention, and analysis parameters

# Projection Methods Configuration
projection_methods:
  # Primary method used for main projections
  primary: "weighted_average"
  
  # Fallback method when primary fails
  fallback: "simple_average"
  
  # Advanced methods for comparison and validation
  advanced:
    - "linear_regression"
    - "exponential_smoothing"
    - "seasonal_decomposition"

# Data Management
data_retention_days: 365  # Keep 1 year of historical data
min_data_points: 7  # Minimum data points required for reliable projections
max_data_points: 10000  # Maximum data points to prevent memory issues

# Analysis Windows
trend_analysis_window_days: 30  # Days to analyze for trends
seasonal_analysis_window_days: 90  # Days to analyze for seasonal patterns
projection_window_days: 30  # Days to project ahead

# Confidence and Quality Thresholds
confidence_threshold: 0.7  # Minimum confidence for reliable projections
volatility_threshold: 0.3  # Threshold for marking trends as volatile
pattern_strength_threshold: 0.1  # Minimum strength for seasonal patterns

# Adjustment Weights
seasonal_adjustment_weight: 0.2  # Weight of seasonal adjustments
trend_adjustment_weight: 0.3  # Weight of trend adjustments
data_quality_weight: 0.5  # Weight of data quality in confidence calculation

# Recalculation Schedule
recalculation_hour: 2  # Hour of day to recalculate projections (2 AM)
recalculation_interval_hours: 24  # Hours between recalculations
emergency_recalculation_threshold: 0.5  # Recalculate if confidence drops below this

# Outlier Detection
outlier_detection:
  enabled: true
  z_score_threshold: 2.5  # Z-score threshold for outlier detection
  iqr_multiplier: 1.5  # IQR multiplier for outlier detection
  max_outlier_percentage: 0.1  # Maximum percentage of outliers allowed

# Trend Analysis Configuration
trend_analysis:
  # Minimum data points for trend analysis
  min_points: 5
  
  # Trend strength calculation
  strength_calculation: "slope_normalized"  # slope_normalized, percentage_change
  
  # Volatility calculation
  volatility_method: "coefficient_of_variation"  # coefficient_of_variation, standard_deviation
  
  # Trend direction thresholds
  stable_threshold: 0.1  # Slope below this is considered stable
  strong_trend_threshold: 0.5  # Slope above this is considered strong

# Seasonal Analysis Configuration
seasonal_analysis:
  # Minimum data points for seasonal analysis
  min_points: 14  # At least 2 weeks of data
  
  # Pattern types to analyze
  analyze_day_of_week: true
  analyze_hour_of_day: true
  analyze_monthly: true
  analyze_quarterly: false
  
  # Pattern strength calculation
  strength_method: "variance_normalized"  # variance_normalized, range_normalized
  
  # Seasonal adjustment limits
  max_adjustment: 0.5  # Maximum 50% adjustment from seasonal patterns
  min_adjustment: -0.3  # Minimum -30% adjustment from seasonal patterns

# Projection Method Specific Settings
method_settings:
  simple_average:
    # No additional settings needed
    pass
  
  weighted_average:
    # Weighting scheme for recent data
    weight_type: "linear"  # linear, exponential, custom
    recent_weight_multiplier: 2.0  # How much more recent data is weighted
  
  linear_regression:
    # Regression settings
    min_points: 10
    confidence_interval: 0.95
    outlier_handling: "robust"  # robust, standard, none
  
  exponential_smoothing:
    # Smoothing parameters
    alpha: 0.3  # Smoothing factor (0-1)
    beta: 0.1  # Trend smoothing factor (0-1)
    gamma: 0.1  # Seasonal smoothing factor (0-1)
  
  seasonal_decomposition:
    # Decomposition settings
    model: "additive"  # additive, multiplicative
    period: 7  # Period for seasonal decomposition (days)
    robust: true  # Use robust decomposition

# Risk Assessment
risk_assessment:
  enabled: true
  
  # Risk factors to check
  risk_factors:
    - "insufficient_data"
    - "high_volatility"
    - "volatile_trend"
    - "strong_seasonal_patterns"
    - "strong_trend"
    - "recent_outliers"
    - "low_confidence"
  
  # Risk thresholds
  risk_thresholds:
    insufficient_data: 7  # Less than 7 data points
    high_volatility: 0.3  # Volatility above 30%
    volatile_trend: true  # Trend direction is volatile
    strong_seasonal_patterns: 0.5  # Seasonal pattern strength above 50%
    strong_trend: 0.7  # Trend strength above 70%
    recent_outliers: 0.2  # More than 20% recent outliers
    low_confidence: 0.5  # Confidence below 50%

# Database Configuration
database:
  # SQLite database settings
  db_path: "./projection_data.db"
  backup_enabled: true
  backup_frequency: "daily"
  backup_retention_days: 30
  
  # Performance settings
  connection_pool_size: 5
  query_timeout_seconds: 30
  vacuum_frequency_days: 7

# Monitoring and Alerting
monitoring:
  enabled: true
  
  # Metrics to track
  metrics:
    - "projection_accuracy"
    - "confidence_levels"
    - "trend_analysis_quality"
    - "seasonal_pattern_strength"
    - "data_quality"
    - "calculation_time"
  
  # Alerting thresholds
  alerts:
    low_confidence:
      threshold: 0.5
      enabled: true
      notification_channels: ["telegram"]
    
    high_volatility:
      threshold: 0.4
      enabled: true
      notification_channels: ["telegram"]
    
    projection_failure:
      enabled: true
      notification_channels: ["telegram", "email"]
    
    data_quality_issues:
      threshold: 0.3
      enabled: true
      notification_channels: ["telegram"]

# Performance Optimization
performance:
  # Caching settings
  cache_enabled: true
  cache_ttl_minutes: 60
  cache_size_mb: 100
  
  # Parallel processing
  parallel_calculations: true
  max_workers: 4
  
  # Memory management
  max_memory_usage_mb: 512
  garbage_collection_frequency: 100  # Every 100 calculations

# Validation and Testing
validation:
  enabled: true
  
  # Cross-validation settings
  cross_validation:
    enabled: true
    folds: 5
    test_size: 0.2
  
  # Backtesting
  backtesting:
    enabled: true
    test_periods: 7  # Test against last 7 days
    accuracy_threshold: 0.8  # 80% accuracy threshold
  
  # A/B testing
  ab_testing:
    enabled: false
    test_methods: ["weighted_average", "linear_regression"]
    test_duration_days: 30

# Logging Configuration
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # Log files
  log_files:
    main_log: "./logs/projection_calculator.log"
    error_log: "./logs/projection_errors.log"
    performance_log: "./logs/projection_performance.log"
  
  # Log rotation
  log_rotation:
    enabled: true
    max_size_mb: 50
    backup_count: 5

# Development and Testing
development:
  # Mock data generation
  mock_data:
    enabled: false
    data_points: 100
    providers: ["aws_lambda", "google_cloud_functions", "azure_functions"]
  
  # Test mode
  test_mode: false
  test_data_retention_days: 30
  
  # Debug settings
  debug_mode: false
  verbose_logging: false
  save_intermediate_results: false

# Integration Settings
integration:
  # Quota manager integration
  quota_manager:
    enabled: true
    sync_frequency_minutes: 15
    auto_update_projections: true
  
  # Load balancer integration
  load_balancer:
    enabled: true
    provide_projections: true
    update_frequency_minutes: 30
  
  # External APIs
  external_apis:
    enabled: false
    endpoints: []
    api_keys: {}

# Environment Variables
environment_variables:
  # Database
  PROJECTION_DB_PATH: "./projection_data.db"
  
  # Notification
  TELEGRAM_BOT_TOKEN: "your-telegram-bot-token"
  TELEGRAM_CHAT_ID: "your-telegram-chat-id"
  
  # External APIs (if enabled)
  EXTERNAL_API_KEY: "your-external-api-key"

# Usage Examples
usage_examples:
  calculate_all_projections: |
    python3 daily_projection_calculator.py --calculate-all
    
  calculate_specific_provider: |
    python3 daily_projection_calculator.py --provider aws_lambda --method weighted_average
    
  show_summary: |
    python3 daily_projection_calculator.py --summary
    
  add_test_data: |
    python3 daily_projection_calculator.py --add-test-data

# API Examples
api_examples:
  python_integration: |
    from daily_projection_calculator import DailyProjectionCalculator, ProviderType, ProjectionMethod
    
    calculator = DailyProjectionCalculator()
    
    # Calculate projection for specific provider
    projection = calculator.calculate_projection(ProviderType.AWS_LAMBDA, ProjectionMethod.WEIGHTED_AVERAGE)
    
    print(f"Projected monthly executions: {projection.projected_monthly_executions}")
    print(f"Confidence level: {projection.confidence_level}")
    print(f"Risk factors: {projection.risk_factors}")
  
  scheduled_execution: |
    # Add to crontab for daily execution at 2 AM
    # 0 2 * * * /usr/bin/python3 /path/to/daily_projection_calculator.py --calculate-all
    
    # Or use systemd timer
    # [Unit]
    # Description=Daily Projection Calculator
    # 
    # [Timer]
    # OnCalendar=daily
    # Persistent=true
    # 
    # [Install]
    # WantedBy=timers.target
