# Personal System - Cursor AI Rules

## Core Principles
- **Privacy First**: Always prioritize user privacy and data security
- **Clear Communication**: Provide actionable, context-aware suggestions
- **Domain Respect**: Honor the personal knowledge management context
- **Security**: Never expose sensitive information, validate all modifications
- **Consistency**: Maintain patterns and standards across the system

## Quick Reference
- **Development**: See `.cursor-rules/development.md` for coding standards
- **Automation**: See `.cursor-rules/automation.md` for automation patterns
- **Deployment**: See `.cursor-rules/deployment.md` for infrastructure rules
- **Documentation**: See `.cursor-rules/documentation.md` for doc standards

## Response Guidelines
- Be concise but comprehensive
- Suggest templates and patterns when appropriate
- Cross-reference related components and workflows
- Maintain consistency with existing system patterns
- Provide context-aware solutions

## Privacy & Security Rules
- Never process files in `.private/` or `privacy/` directories
- Mask sensitive data in all examples and outputs
- Validate data modifications before execution
- Remind users about privacy best practices
- Use environment variables for sensitive configuration

## System Architecture
This is a comprehensive personal knowledge management and automation system organized around:
- **Life Domains**: Career, health, finance, learning, relationships, startups
- **Automation Layer**: Scripts, tools, integrations, and serverless functions
- **Project Management**: Active, planned, and archived projects
- **Workflow Templates**: Daily, weekly, monthly, quarterly, and annual routines

## File Organization Standards
- **Descriptive naming**: Use lowercase with underscores for spaces
- **Consistent extensions**: `.md` for docs, `.py` for Python, `.yaml/.yml` for configs
- **Grouped structure**: Related files in appropriately named directories
- **README requirement**: Every directory must have a README.md file

## Integration Points
- **Google Drive Sync**: Automated backup and synchronization
- **Serverless Functions**: AWS Lambda for automated workflows
- **Webhooks**: External service integrations
- **Database Management**: Gitea and shared database configurations
- **Deployment**: Coolify and container orchestration

## Maintenance Guidelines
- Keep domain-specific content organized within respective directories
- Maintain consistent structure across similar folders
- Update automation when adding new workflows
- Ensure privacy-sensitive data remains encrypted
- Regular backup and synchronization of critical data
- Always maintain README.md files for every folder

## Tool Creation Standards
When creating new tools or automations:
- **Simple scripts**: Use `automation/scripts/` for single-file tools
- **Complex tools**: Use `automation/tools/tool_name/` for multi-file tools
- **Required files**: README.md, config files, main script, setup script (if needed)
- **Documentation**: Include purpose, quick start, configuration, examples, troubleshooting

## Configuration Management
- Use `config/` directory for all configuration files
- Environment-specific configs in `config/environments/`
- Domain-specific configs in `config/domains/`
- Automation configs in `config/automation/`
- Use environment variables for sensitive data

## Project Organization
- **Active projects**: `projects/active/project_name/`
- **Planned projects**: `projects/planned/`
- **Archived projects**: `projects/archive/` or `projects/completed/`
- **Templates**: `projects/templates/`
- Each project requires README.md with overview, goals, and status

## Documentation Requirements
Every directory must include a README.md with:
- **Purpose**: What the directory contains and why it exists
- **Contents**: Overview of files and subdirectories
- **Usage**: How to use the contents with examples
- **Related**: Links to related components
- **Last Updated**: Date and description of last modification