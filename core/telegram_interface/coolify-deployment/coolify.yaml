# Coolify Configuration for Personal System Telegram Bot
# This file contains Coolify-specific deployment settings

# Application metadata
app:
  name: "personal-telegram-bot"
  description: "Personal System Telegram Bot - Voice-enabled automation platform"
  version: "1.0.0"
  author: "Personal System"

# Build configuration
build:
  # Build context (relative to repository root)
  context: "core/telegram_interface"
  
  # Dockerfile path
  dockerfile: "Dockerfile"
  
  # Build arguments
  args:
    - "PYTHON_VERSION=3.10"
    - "BUILD_ENV=production"
  
  # Build options
  options:
    - "--no-cache"
    - "--pull"

# Runtime configuration
runtime:
  # Container restart policy
  restart: "unless-stopped"
  
  # Resource limits
  resources:
    memory: "512Mi"
    cpu: "0.5"
  
  # Health check configuration
  healthcheck:
    test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
    interval: "30s"
    timeout: "10s"
    retries: 3
    start_period: "40s"

# Network configuration
network:
  # Port mapping
  ports:
    - "8000:8000"
  
  # Network mode
  mode: "bridge"

# Volume configuration
volumes:
  # Persistent data storage
  - name: "bot_data"
    mount_path: "/app/data"
    type: "bind"
    source: "./data"
  
  # Log storage
  - name: "bot_logs"
    mount_path: "/app/logs"
    type: "bind"
    source: "./logs"
  
  # Configuration storage
  - name: "bot_config"
    mount_path: "/app/config"
    type: "bind"
    source: "./config"

# Environment variables
environment:
  # Required variables
  required:
    - "TELEGRAM_BOT_TOKEN"
    - "TELEGRAM_USER_ID"
  
  # Optional variables
  optional:
    - "OPENAI_API_KEY"
    - "ELEVENLABS_API_KEY"
    - "HEALTH_CHECK_PORT"
    - "LOG_LEVEL"
    - "ENVIRONMENT"

# Deployment configuration
deployment:
  # Deployment strategy
  strategy: "rolling"
  
  # Auto-deploy on git push
  auto_deploy: true
  
  # Deploy branches
  deploy_branches:
    - "main"
    - "production"
  
  # Webhook configuration
  webhook:
    enabled: true
    secret: "${WEBHOOK_SECRET}"
    events:
      - "push"
      - "pull_request"

# Monitoring configuration
monitoring:
  # Health check endpoint
  health_endpoint: "/health"
  
  # Metrics endpoint
  metrics_endpoint: "/metrics"
  
  # Log aggregation
  logs:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "5"

# Security configuration
security:
  # Run as non-root user
  user: "botuser"
  
  # Read-only root filesystem
  read_only_root: false
  
  # Capabilities
  capabilities:
    drop:
      - "ALL"
    add:
      - "NET_BIND_SERVICE"

# Backup configuration
backup:
  # Enable automatic backups
  enabled: true
  
  # Backup schedule (cron format)
  schedule: "0 2 * * *"
  
  # Backup retention
  retention:
    daily: 7
    weekly: 4
    monthly: 12
  
  # Backup locations
  locations:
    - "/app/data"
    - "/app/config"

# Scaling configuration
scaling:
  # Horizontal scaling
  replicas:
    min: 1
    max: 3
    default: 1
  
  # Auto-scaling triggers
  autoscaling:
    enabled: false
    cpu_threshold: 70
    memory_threshold: 80

# Update configuration
updates:
  # Update strategy
  strategy: "rolling"
  
  # Maintenance window
  maintenance_window:
    start: "02:00"
    duration: "2h"
    timezone: "UTC"
  
  # Rollback configuration
  rollback:
    enabled: true
    max_revisions: 5

# Integration configuration
integrations:
  # Database integration
  database:
    enabled: false
    type: "postgresql"
    connection_string: "${DATABASE_URL}"
  
  # Redis integration
  redis:
    enabled: false
    connection_string: "${REDIS_URL}"
  
  # External APIs
  apis:
    - name: "openai"
      url: "https://api.openai.com"
      required: false
    - name: "elevenlabs"
      url: "https://api.elevenlabs.io"
      required: false

# Notification configuration
notifications:
  # Email notifications
  email:
    enabled: false
    recipients: ["${ADMIN_EMAIL}"]
  
  # Slack notifications
  slack:
    enabled: false
    webhook: "${SLACK_WEBHOOK}"
  
  # Telegram notifications
  telegram:
    enabled: false
    bot_token: "${NOTIFICATION_BOT_TOKEN}"
    chat_id: "${ADMIN_CHAT_ID}"
  
  # Events to notify on
  events:
    - "deploy_started"
    - "deploy_success"
    - "deploy_failed"
    - "health_check_failed"
    - "backup_completed"
    - "backup_failed"

# Documentation
documentation:
  # Auto-generate documentation
  auto_generate: true
  
  # Documentation formats
  formats:
    - "markdown"
    - "html"
  
  # Update schedule
  update_schedule: "0 3 * * *"

# Metadata
metadata:
  # Labels
  labels:
    app: "personal-telegram-bot"
    component: "telegram-bot"
    environment: "production"
    version: "1.0.0"
  
  # Annotations
  annotations:
    description: "Personal System Telegram Bot for voice-enabled automation"
    maintainer: "Personal System"
    created: "2024-01-01"
    updated: "2024-01-01"
